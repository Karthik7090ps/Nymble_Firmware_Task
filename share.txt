Here’s your updated `full_swarm_workflow_interactive.py`, modified so it only uses a bearer token (no username/password) to authenticate to Swarm, and drops the unused `SWARM_USER`/`SWARM_PASS` paths. All other functionality is unchanged:

```python
#!/usr/bin/env python3
"""
full_swarm_workflow_interactive.py

An interactive, menu-driven Python CLI that automates the full Perforce → Swarm Helix review workflow:

  • Perforce operations: add, edit, delete, diff, create‐change, shelve, submit  
  • Swarm review operations: create, attach changelist, update review metadata, get review details, approve

When you run this script:

    python3 full_swarm_workflow_interactive.py

you’ll see a numbered menu. Enter the number of the action you want, then follow on-screen prompts
for any required inputs (file paths, changelist numbers, review IDs, etc.).

── ENVIRONMENT VARIABLES ──────────────────────────────────────────────────────

  P4PORT      – e.g. "perforce:1666"  
  P4USER      – your Perforce username  
  P4CLIENT    – your Perforce workspace/client name  
  P4PASSWD    – (optional) your Perforce password (or use `p4 login`)

  SWARM_URL   – e.g. "https://swarm.example.com/api/v10"  (must include `/api/v<ver>`)
  SWARM_TOKEN – your Swarm API bearer token (required; no username/password)

Requirements:

  • P4Python:      pip3 install P4Python  
  • helix-swarm:   pip3 install helix-swarm  
"""

import os
import sys
import json
from P4 import P4, P4Exception
from helixswarm import SwarmClient

# ──────────────────────────────────────────
# CONFIGURATION (override via ENV)
# ──────────────────────────────────────────

P4PORT     = os.environ.get("P4PORT",   "perforce:1666")
P4USER     = os.environ.get("P4USER",   "your_p4_username")
P4CLIENT   = os.environ.get("P4CLIENT", "your_workspace_name")
P4PASSWD   = os.environ.get("P4PASSWD", "")

SWARM_URL   = os.environ.get("SWARM_URL",   "https://swarm.example.com/api/v10")
SWARM_TOKEN = os.environ.get("SWARM_TOKEN", None)

if not SWARM_TOKEN:
    print("❌ ERROR: Please set SWARM_TOKEN in your environment")
    sys.exit(1)

# ──────────────────────────────────────────
# TOKEN-BASED SWARM CLIENT SUBCLASS
# ──────────────────────────────────────────

class TokenSwarmClient(SwarmClient):
    """
    Helix-Swarm client that authenticates via Bearer token.
    """
    def __init__(self, base_url: str, token: str):
        super().__init__(base_url, username="", password="")
        # disable basic auth
        self.session.auth = None
        # add bearer token
        self.session.headers.update({
            "Authorization": f"Bearer {token}"
        })

# ──────────────────────────────────────────
# P4CLIENT HELPER
# ──────────────────────────────────────────

class P4Client:
    """Wraps basic Perforce operations via P4Python."""
    def __init__(self):
        self.p4 = P4()
        self.p4.port   = P4PORT
        self.p4.user   = P4USER
        self.p4.client = P4CLIENT
        if P4PASSWD:
            self.p4.password = P4PASSWD
        try:
            self.p4.connect()
        except P4Exception as e:
            print("❌ Failed to connect to Perforce:", e)
            sys.exit(1)

    def run(self, *args):
        try:
            return self.p4.run(*args)
        except P4Exception as e:
            print(f"❌ P4 Error `{args}`:", e)
            return None

    def add(self, path):       self._one("add",    path, "opened for add")
    def edit(self, path):      self._one("edit",   path, "opened for edit")
    def delete(self, path):    self._one("delete", path, "opened for delete")

    def _one(self, cmd, path, msg):
        print(f"\n→ p4 {cmd} {path}")
        self.run(cmd, path)
        print(f"✔ File {msg}.")

    def diff(self, path=None):
        cmd = ["diff"] + ([path] if path else [])
        print(f"\n→ p4 {' '.join(cmd)}")
        out = self.run(*cmd) or []
        print("\n".join(out) or "No diffs.")
        print("✔ Diff complete.")

    def list_opened(self):
        print("\n→ p4 opened")
        out = self.run("opened") or []
        print("\n".join(out) or "No open files.")
        print("✔ Listed opened files.")

    def create_change(self, desc="Auto-generated"):
        print("\n→ Creating new changelist…")
        spec = self.run("change", "-o")
        if not spec:
            print("❌ Failed to fetch changelist spec."); return None
        spec = spec[0]
        spec["Description"] = desc
        out = self.run("change", "-i", spec)
        if not out:
            print("❌ Failed to create changelist."); return None
        num = int(out[0].split()[1])
        print(f"✔ New changelist: {num}")
        return num

    def shelve(self, cl):
        print(f"\n→ p4 shelve -c {cl}")
        self.run("shelve", "-c", str(cl))
        print("✔ Shelved.")

    def submit(self, cl):
        print(f"\n→ p4 submit -c {cl}")
        out = self.run("submit", "-c", str(cl)) or []
        print("\n".join(out))
        print("✔ Submitted.")

    def disconnect(self):
        self.p4.disconnect()

# ──────────────────────────────────────────
# SWARM HELPER
# ──────────────────────────────────────────

class SwarmHelper:
    """Wraps review operations using TokenSwarmClient."""
    def __init__(self):
        self.client = TokenSwarmClient(SWARM_URL, SWARM_TOKEN)

    def create_review(self, cl, desc="", reviewers=None):
        print(f"\n» Creating review for CL {cl}…")
        payload = {"change": cl}
        if desc:      payload["description"] = desc
        if reviewers: payload["reviewers"]   = reviewers
        resp = self.client.reviews.create(payload)
        rid  = resp["review"]["id"]
        print(f"✔ Review ID: {rid}")
        return rid

    def attach_change(self, rid, cl):
        print(f"\n» Attaching CL {cl} → review {rid}…")
        self.client.reviews.append_change(f"reviews/{rid}", {"change": cl})
        print("✔ Attached.")

    def update_review(self, rid, desc=None, add=None, remove=None):
        print(f"\n» Updating review {rid}…")
        pl = {}
        if desc is not None: pl["description"]    = desc
        if add:               pl["reviewersAdd"]   = add
        if remove:            pl["reviewersRemove"]= remove
        self.client.reviews.update(f"reviews/{rid}", pl)
        print("✔ Updated.")

    def get_review(self, rid):
        print(f"\n» Fetching review {rid} details…")
        info = self.client.reviews.get_info(rid)["review"]
        print(json.dumps(info, indent=2))

    def approve_review(self, rid, msg=""):
        print(f"\n» Approving review {rid}…")
        pl = {"message": msg} if msg else {}
        self.client.reviews.approve(f"reviews/{rid}", pl)
        print("✔ Approved.")

# ──────────────────────────────────────────
# INTERACTIVE MENU
# ──────────────────────────────────────────

def print_menu():
    print("""
===== Perforce ↔ Swarm Helix Menu =====
 1) p4 add <file>
 2) p4 edit <file>
 3) p4 delete <file>
 4) p4 diff [file]
 5) p4 opened
 6) Create changelist
 7) Shelve changelist
 8) Submit changelist
 9) Create Swarm review
10) Attach CL to review
11) Update review metadata
12) Get review details
13) Approve review
14) Exit
======================================
""")

def main():
    p4    = P4Client()
    swarm = SwarmHelper()

    while True:
        print_menu()
        choice = input("Choose [1-14]: ").strip()

        if choice == "1":
            fp = input("File to add: ").strip(); p4.add(fp)
        elif choice == "2":
            fp = input("File to edit: ").strip(); p4.edit(fp)
        elif choice == "3":
            fp = input("File to delete: ").strip(); p4.delete(fp)
        elif choice == "4":
            fp = input("File to diff (blank=all): ").strip() or None; p4.diff(fp)
        elif choice == "5":
            p4.list_opened()
        elif choice == "6":
            d = input("Changelist description: ").strip() or "Auto-generated"
            cl = p4.create_change(d)
            if cl: print(f"→ CL {cl}")
        elif choice == "7":
            cl = int(input("Changelist #: ").strip()); p4.shelve(cl)
        elif choice == "8":
            cl = int(input("Changelist #: ").strip()); p4.submit(cl)
        elif choice == "9":
            cl = int(input("Shelved CL #: ").strip())
            d  = input("Review description: ").strip()
            rv = input("Reviewers (space-separated): ").strip().split() or None
            swarm.create_review(cl, d, rv)
        elif choice == "10":
            rid= int(input("Review ID: ").strip())
            cl = int(input("Shelved CL #: ").strip())
            swarm.attach_change(rid, cl)
        elif choice == "11":
            rid= int(input("Review ID: ").strip())
            d  = input("New description (blank skip): ").strip() or None
            a  = input("Add reviewers: ").strip().split() or None
            r  = input("Remove reviewers: ").strip().split() or None
            swarm.update_review(rid, desc=d, add=a, remove=r)
        elif choice == "12":
            rid= int(input("Review ID: ").strip()); swarm.get_review(rid)
        elif choice == "13":
            rid= int(input("Review ID: ").strip())
            m  = input("Approval comment: ").strip()
            swarm.approve_review(rid, msg=m)
        elif choice == "14":
            print("Goodbye!"); break
        else:
            print("Invalid choice, enter 1–14.")

    p4.disconnect()

if __name__ == "__main__":
    main()
```
