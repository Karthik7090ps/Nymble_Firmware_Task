#!/usr/bin/env python3
"""
full_swarm_workflow_interactive.py

An interactive, menu‑driven Python CLI that automates the full Perforce + Swarm Helix review workflow:

  • Perforce operations: add, edit, delete, diff, create‐change, shelve, submit
  • Swarm review operations: create, attach changelist, edit review metadata, get review details, approve

When you run this script (`python3 full_swarm_workflow_interactive.py`), you will be presented with
a numbered list of actions. Enter the number corresponding to the action you want to perform, and
then follow the prompts for any required inputs (file paths, changelist numbers, review IDs, etc.).

Environment variables (optional, but recommended for credentials/configuration):

  • P4PORT      – e.g. “perforce:1666”
  • P4USER      – your Perforce username
  • P4CLIENT    – your Perforce workspace/client name
  • P4PASSWD    – your Perforce password (or run “p4 login” once, and leave this blank)
  • SWARM_URL   – e.g. “https://swarm.example.com”
  • SWARM_USER  – your Swarm username
  • SWARM_PASS  – your Swarm password
  • SWARM_TOKEN – (optional) a bearer token for Swarm API authentication (takes precedence over SWARM_USER/​SWARM_PASS)

Adjust SWARM_API_VER if your Swarm installation uses a different API version.
"""

import os
import sys
import json
from P4 import P4, P4Exception
import requests

# ──────────────────────────────────────────
# CONFIGURATION (Can be overridden via ENV)
# ──────────────────────────────────────────

P4PORT   = os.environ.get("P4PORT", "perforce:1666")
P4USER   = os.environ.get("P4USER", "your_p4_username")
P4CLIENT = os.environ.get("P4CLIENT", "your_workspace_name")
P4PASSWD = os.environ.get("P4PASSWD", "")

SWARM_BASE_URL = os.environ.get("SWARM_URL", "https://swarm.example.com")
SWARM_USER     = os.environ.get("SWARM_USER", "your_swarm_username")
SWARM_PASS     = os.environ.get("SWARM_PASS", "your_swarm_password")
SWARM_TOKEN    = os.environ.get("SWARM_TOKEN", None)

# Adjust to match your Swarm installation if different
SWARM_API_VER = "v10"


# ──────────────────────────────────────────
# P4CLIENT HELPER
# ──────────────────────────────────────────

class P4Client:
    """
    Wraps P4Python calls for basic Perforce operations:
      add, edit, delete, diff, create-change, shelve, submit
    """
    def __init__(self):
        self.p4 = P4()
        self.p4.port   = P4PORT
        self.p4.user   = P4USER
        self.p4.client = P4CLIENT
        if P4PASSWD:
            self.p4.password = P4PASSWD

        try:
            self.p4.connect()
        except P4Exception as e:
            print("❌ Failed to connect to Perforce:", e)
            sys.exit(1)

    def run(self, *args):
        try:
            return self.p4.run(*args)
        except P4Exception as e:
            print(f"❌ P4 Error running `{args}`: {e}")
            return None

    def add(self, file_path):
        """p4 add <file_path>"""
        print(f"\n→ p4 add {file_path}")
        self.run("add", file_path)
        print("✔ Done.")

    def edit(self, file_path):
        """p4 edit <file_path>"""
        print(f"\n→ p4 edit {file_path}")
        self.run("edit", file_path)
        print("✔ Done.")

    def delete(self, file_path):
        """p4 delete <file_path>"""
        print(f"\n→ p4 delete {file_path}")
        self.run("delete", file_path)
        print("✔ Done.")

    def diff(self, file_path=None):
        """
        p4 diff [file_path]
        If file_path is None, shows diff for all open files.
        """
        cmd = ["diff"]
        if file_path:
            cmd.append(file_path)

        print(f"\n→ p4 {' '.join(cmd)}")
        output = self.run(*cmd)
        if output:
            print("\n".join(output))
        else:
            print("No differences or error.")
        print("✔ Done.")

    def create_change(self, description="Auto-generated by script"):
        """
        p4 change -o | modify Description | p4 change -i
        Returns the new changelist number.
        """
        print("\n→ Creating new changelist")
        spec = self.run("change", "-o")
        if not spec:
            print("❌ Failed to fetch changelist spec.")
            return None
        spec_dict = spec[0]
        spec_dict["Description"] = description
        result = self.run("change", "-i", spec_dict)
        if not result:
            print("❌ Failed to create changelist.")
            return None
        # Example output: ['Change 12345 created.']
        msg = result[0]
        try:
            change_num = int(msg.split()[1])
            print(f"✔ New changelist created: {change_num}")
            return change_num
        except (IndexError, ValueError):
            print("❌ Unexpected response:", msg)
            return None

    def shelve(self, changelist_number):
        """p4 shelve -c <changelist_number>"""
        print(f"\n→ p4 shelve -c {changelist_number}")
        self.run("shelve", "-c", str(changelist_number))
        print("✔ Shelved.")

    def submit(self, changelist_number):
        """p4 submit -c <changelist_number>"""
        print(f"\n→ p4 submit -c {changelist_number}")
        result = self.run("submit", "-c", str(changelist_number))
        if result:
            print("\n".join(result))
        else:
            print("❌ Submit failed or no output.")
        print("✔ Done.")

    def list_opened(self):
        """p4 opened"""
        print("\n→ p4 opened")
        result = self.run("opened")
        if result:
            print("\n".join(result))
        else:
            print("No files opened or error.")
        print("✔ Done.")

    def disconnect(self):
        """Disconnect from the Perforce server"""
        self.p4.disconnect()


# ──────────────────────────────────────────
# SWARM HELPER
# ──────────────────────────────────────────

class SwarmClient:
    """
    Wraps HTTP calls to the Swarm Helix REST API for review management:
      create-review, attach-change, update-review, get-review, approve-review
    """
    def __init__(self, base_url, username=None, password=None, token=None, api_ver="v10"):
        self.base_url = base_url.rstrip('/')
        self.api_ver  = api_ver
        self.session  = requests.Session()

        if token:
            self.session.headers.update({"Authorization": f"Bearer {token}"})
        else:
            self.session.auth = (username, password)

        self.session.headers.update({"Content-Type": "application/json"})

    def _endpoint(self, path):
        return f"{self.base_url}/api/{self.api_ver}/{path.lstrip('/')}"

    def create_review(self, changelist, description="", reviewers=None):
        """
        POST /reviews
        Payload: { "change": <num>, "description": "...", "reviewers": [ ... ] }
        Returns the new review ID.
        """
        url = self._endpoint("reviews")
        payload = {"change": changelist}
        if description:
            payload["description"] = description
        if reviewers:
            payload["reviewers"] = reviewers

        print(f"\n» Swarm: Creating review for changelist {changelist}")
        resp = self.session.post(url, data=json.dumps(payload), verify=True)
        if resp.status_code == 200:
            review_info = resp.json().get("review", {})
            review_id   = review_info.get("id")
            print(f"✔ Review created with ID: {review_id}")
            return review_id
        else:
            print("❌ Swarm create review failed:", resp.status_code, resp.text)
            return None

    def attach_change(self, review_id, changelist):
        """
        POST /reviews/{id}/changes
        Payload: { "change": <num> }
        """
        url = self._endpoint(f"reviews/{review_id}/changes")
        payload = {"change": changelist}
        print(f"\n» Swarm: Attaching changelist {changelist} to review {review_id}")
        resp = self.session.post(url, data=json.dumps(payload), verify=True)
        if resp.status_code == 200:
            print("✔ Attached.")
            return resp.json()
        else:
            print("❌ Swarm attach change failed:", resp.status_code, resp.text)
            return None

    def update_review(self, review_id, description=None, add_reviewers=None, remove_reviewers=None):
        """
        PUT /reviews/{id}
        Payload can include:
          { "description": "...", "reviewersAdd": [...], "reviewersRemove": [...] }
        """
        url = self._endpoint(f"reviews/{review_id}")
        payload = {}
        if description is not None:
            payload["description"] = description
        if add_reviewers:
            payload["reviewersAdd"] = add_reviewers
        if remove_reviewers:
            payload["reviewersRemove"] = remove_reviewers

        print(f"\n» Swarm: Updating review {review_id}")
        resp = self.session.put(url, data=json.dumps(payload), verify=True)
        if resp.status_code == 200:
            print("✔ Review updated.")
            return resp.json()
        else:
            print("❌ Swarm update review failed:", resp.status_code, resp.text)
            return None

    def get_review(self, review_id):
        """
        GET /reviews/{id}
        Returns JSON with review details.
        """
        url = self._endpoint(f"reviews/{review_id}")
        print(f"\n» Swarm: Fetching review {review_id}")
        resp = self.session.get(url, verify=True)
        if resp.status_code == 200:
            review_info = resp.json().get("review", {})
            print(json.dumps(review_info, indent=2))
            return review_info
        else:
            print("❌ Swarm get review failed:", resp.status_code, resp.text)
            return None

    def approve_review(self, review_id, message=""):
        """
        POST /reviews/{id}/approve
        Payload: { "message": "Approval comment" }
        """
        url = self._endpoint(f"reviews/{review_id}/approve")
        payload = {}
        if message:
            payload["message"] = message

        print(f"\n» Swarm: Approving review {review_id}")
        resp = self.session.post(url, data=json.dumps(payload), verify=True)
        if resp.status_code == 200:
            print("✔ Review approved.")
            return resp.json()
        else:
            print("❌ Swarm approve review failed:", resp.status_code, resp.text)
            return None


# ──────────────────────────────────────────
# INTERACTIVE MENU
# ──────────────────────────────────────────

def print_menu():
    print("\n===== Perforce + Swarm Helix Workflow Menu =====")
    print("1)   Perforce: p4 add <file>")
    print("2)   Perforce: p4 edit <file>")
    print("3)   Perforce: p4 delete <file>")
    print("4)   Perforce: p4 diff [optional <file>]")
    print("5)   Perforce: p4 opened (list opened files)")
    print("6)   Perforce: Create a new pending changelist")
    print("7)   Perforce: Shelve a pending changelist")
    print("8)   Perforce: Submit a pending changelist")
    print("9)   Swarm: Create a review for a shelved changelist")
    print("10)  Swarm: Attach another changelist to an existing review")
    print("11)  Swarm: Update review metadata (description, add/remove reviewers)")
    print("12)  Swarm: Fetch and display review details")
    print("13)  Swarm: Approve a review")
    print("14)  Exit")
    print("================================================")


def main():
    # Initialize clients once
    p4_client = P4Client()
    if SWARM_TOKEN:
        swarm_client = SwarmClient(
            SWARM_BASE_URL, token=SWARM_TOKEN, api_ver=SWARM_API_VER
        )
    else:
        swarm_client = SwarmClient(
            SWARM_BASE_URL, username=SWARM_USER, password=SWARM_PASS, api_ver=SWARM_API_VER
        )

    while True:
        print_menu()
        choice = input("Enter choice [1-14]: ").strip()

        if choice == "1":
            file_path = input("Enter file path to add: ").strip()
            if file_path:
                p4_client.add(file_path)

        elif choice == "2":
            file_path = input("Enter file path to edit: ").strip()
            if file_path:
                p4_client.edit(file_path)

        elif choice == "3":
            file_path = input("Enter file path to delete: ").strip()
            if file_path:
                p4_client.delete(file_path)

        elif choice == "4":
            file_path = input("Enter file path to diff (leave blank for all): ").strip()
            if file_path:
                p4_client.diff(file_path)
            else:
                p4_client.diff()

        elif choice == "5":
            p4_client.list_opened()

        elif choice == "6":
            desc = input("Enter description for the new changelist: ").strip()
            if not desc:
                desc = "Auto-generated changelist"
            new_cl = p4_client.create_change(description=desc)
            if new_cl is not None:
                print(f"→ New changelist number: {new_cl}")

        elif choice == "7":
            cl_input = input("Enter pending changelist number to shelve: ").strip()
            if cl_input.isdigit():
                p4_client.shelve(int(cl_input))
            else:
                print("❌ Invalid changelist number.")

        elif choice == "8":
            cl_input = input("Enter pending changelist number to submit: ").strip()
            if cl_input.isdigit():
                p4_client.submit(int(cl_input))
            else:
                print("❌ Invalid changelist number.")

        elif choice == "9":
            cl_input = input("Enter shelved changelist number to review: ").strip()
            if not cl_input.isdigit():
                print("❌ Invalid changelist number.")
                continue
            changelist = int(cl_input)

            desc = input("Enter review description (optional): ").strip()
            reviewers_str = input(
                "Enter Swarm reviewers (space-separated usernames, leave blank for none): "
            ).strip()
            reviewers = reviewers_str.split() if reviewers_str else None

            review_id = swarm_client.create_review(
                changelist=changelist,
                description=desc,
                reviewers=reviewers
            )
            if review_id:
                print(f"→ Created Swarm review ID: {review_id}")

        elif choice == "10":
            rev_input = input("Enter existing Swarm review ID: ").strip()
            cl_input  = input("Enter shelved changelist number to attach: ").strip()
            if not (rev_input.isdigit() and cl_input.isdigit()):
                print("❌ Invalid review ID or changelist number.")
                continue
            review_id  = int(rev_input)
            changelist = int(cl_input)
            swarm_client.attach_change(review_id, changelist)

        elif choice == "11":
            rev_input = input("Enter Swarm review ID to update: ").strip()
            if not rev_input.isdigit():
                print("❌ Invalid review ID.")
                continue
            review_id = int(rev_input)

            desc = input("Enter new review description (leave blank to skip): ").strip()
            add_str = input("Enter reviewers to ADD (space-separated, leave blank to skip): ").strip()
            remove_str = input("Enter reviewers to REMOVE (space-separated, leave blank to skip): ").strip()

            add_reviewers    = add_str.split() if add_str else None
            remove_reviewers = remove_str.split() if remove_str else None

            swarm_client.update_review(
                review_id=review_id,
                description=desc if desc else None,
                add_reviewers=add_reviewers,
                remove_reviewers=remove_reviewers
            )

        elif choice == "12":
            rev_input = input("Enter Swarm review ID to fetch: ").strip()
            if not rev_input.isdigit():
                print("❌ Invalid review ID.")
                continue
            review_id = int(rev_input)
            swarm_client.get_review(review_id)

        elif choice == "13":
            rev_input = input("Enter Swarm review ID to approve: ").strip()
            if not rev_input.isdigit():
                print("❌ Invalid review ID.")
                continue
            review_id = int(rev_input)
            msg = input("Enter approval comment (leave blank for none): ").strip()
            swarm_client.approve_review(review_id, message=msg)

        elif choice == "14":
            print("\nExiting. Goodbye!")
            break

        else:
            print("❌ Invalid choice. Please enter a number between 1 and 14.")

    # Clean up & disconnect from Perforce
    p4_client.disconnect()


if __name__ == "__main__":
    main()