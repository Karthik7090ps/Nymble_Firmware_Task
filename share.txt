#!/usr/bin/env python3
"""
full_swarm_workflow_interactive.py

An interactive, menu‑driven Python CLI that automates the full Perforce → Swarm Helix review workflow:

  • Perforce operations: add, edit, delete, diff, create‐change, shelve, submit  
  • Swarm review operations: create, attach changelist, update review metadata, get review details, approve

When you run this script:

    python3 full_swarm_workflow_interactive.py

you’ll see a numbered menu. Enter the number of the action you want, then follow on‑screen prompts
for any required inputs (file paths, changelist numbers, review IDs, etc.).

── ENVIRONMENT VARIABLES ──────────────────────────────────────────────────────
(All are optional—if not set, the script falls back to the hard‑coded defaults below.)

  P4PORT      – e.g. “perforce:1666”  
  P4USER      – your Perforce username  
  P4CLIENT    – your Perforce workspace/client name  
  P4PASSWD    – your Perforce password (or run “p4 login” once and leave this blank)  

  SWARM_URL   – e.g. “https://swarm.example.com/api/v10”  
  SWARM_USER  – your Swarm username  
  SWARM_PASS  – your Swarm password  
  SWARM_TOKEN – (optional) a Bearer token for Swarm API (takes precedence over SWARM_USER/SWARM_PASS)

Make sure you have:

  • P4Python installed:  
      pip3 install P4Python

  • helixswarm installed:  
      pip3 install helixswarm

  • A valid Perforce workspace/client configured (P4PORT, P4USER, P4CLIENT, etc.).  
  • Swarm server reachable (SWARM_URL should include the “/api/v<version>” prefix, e.g. “https://swarm.mycompany.com/api/v10”).

Adjust SWARM_API_VER below if your Swarm uses a different API version than v10.
"""

import os
import sys
import json
from P4 import P4, P4Exception
from helixswarm import SwarmClient

# ──────────────────────────────────────────
# CONFIGURATION (Defaults, overridden by ENV)
# ──────────────────────────────────────────

# Perforce settings:
P4PORT   = os.environ.get("P4PORT",   "perforce:1666")
P4USER   = os.environ.get("P4USER",   "your_p4_username")
P4CLIENT = os.environ.get("P4CLIENT", "your_workspace_name")
P4PASSWD = os.environ.get("P4PASSWD", "")

# Swarm settings:
# SWARM_URL must include “/api/v<version>” suffix, e.g.:
#   https://swarm.example.com/api/v10
SWARM_URL   = os.environ.get("SWARM_URL",   "https://swarm.example.com/api/v10")
SWARM_USER  = os.environ.get("SWARM_USER",  "your_swarm_username")
SWARM_PASS  = os.environ.get("SWARM_PASS",  "your_swarm_password")
SWARM_TOKEN = os.environ.get("SWARM_TOKEN", None)

# ──────────────────────────────────────────
# P4CLIENT HELPER
# ──────────────────────────────────────────

class P4Client:
    """
    Wraps P4Python calls for basic Perforce operations:
      add, edit, delete, diff, create‐change, shelve, submit, opened.
    """
    def __init__(self):
        self.p4 = P4()
        self.p4.port   = P4PORT
        self.p4.user   = P4USER
        self.p4.client = P4CLIENT
        if P4PASSWD:
            self.p4.password = P4PASSWD

        try:
            self.p4.connect()
        except P4Exception as e:
            print("❌ Failed to connect to Perforce:", e)
            sys.exit(1)

    def run(self, *args):
        try:
            return self.p4.run(*args)
        except P4Exception as e:
            print(f"❌ P4 Error running `{args}`: {e}")
            return None

    def add(self, file_path):
        """p4 add <file_path>"""
        print(f"\n→ p4 add {file_path}")
        self.run("add", file_path)
        print("✔ File opened for add.")

    def edit(self, file_path):
        """p4 edit <file_path>"""
        print(f"\n→ p4 edit {file_path}")
        self.run("edit", file_path)
        print("✔ File opened for edit.")

    def delete(self, file_path):
        """p4 delete <file_path>"""
        print(f"\n→ p4 delete {file_path}")
        self.run("delete", file_path)
        print("✔ File opened for delete.")

    def diff(self, file_path=None):
        """
        p4 diff [file_path]
        If file_path is None, shows diff for all open files.
        """
        cmd = ["diff"]
        if file_path:
            cmd.append(file_path)

        print(f"\n→ p4 {' '.join(cmd)}")
        result = self.run(*cmd)
        if result:
            print("\n".join(result))
        else:
            print("No differences or error.")
        print("✔ Diff complete.")

    def create_change(self, description="Auto-generated by script"):
        """
        p4 change -o → modify Description → p4 change -i
        Returns the new changelist number.
        """
        print("\n→ Creating new changelist...")
        spec = self.run("change", "-o")
        if not spec:
            print("❌ Failed to fetch changelist spec.")
            return None

        spec_dict = spec[0]
        spec_dict["Description"] = description
        result = self.run("change", "-i", spec_dict)
        if not result:
            print("❌ Failed to create changelist.")
            return None

        # Example output: ['Change 12345 created.']
        msg = result[0]
        try:
            change_num = int(msg.split()[1])
            print(f"✔ New changelist created: {change_num}")
            return change_num
        except (IndexError, ValueError):
            print("❌ Unexpected response:", msg)
            return None

    def shelve(self, changelist_number):
        """p4 shelve -c <changelist_number>"""
        print(f"\n→ p4 shelve -c {changelist_number}")
        self.run("shelve", "-c", str(changelist_number))
        print("✔ Shelved changelist.")

    def submit(self, changelist_number):
        """p4 submit -c <changelist_number>"""
        print(f"\n→ p4 submit -c {changelist_number}")
        result = self.run("submit", "-c", str(changelist_number))
        if result:
            print("\n".join(result))
        else:
            print("❌ Submit failed or no output.")
        print("✔ Submit complete.")

    def list_opened(self):
        """p4 opened"""
        print("\n→ p4 opened")
        result = self.run("opened")
        if result:
            print("\n".join(result))
        else:
            print("No files opened or error.")
        print("✔ Listed opened files.")

    def disconnect(self):
        """Disconnect from the Perforce server"""
        self.p4.disconnect()


# ──────────────────────────────────────────
# SWARM CLIENT HELPER (via helixswarm)
# ──────────────────────────────────────────

class SwarmHelper:
    """
    Wraps helixswarm.SwarmClient calls for:
      create-review, attach‐change, update‐review, get‐review, approve‐review.
    """
    def __init__(self):
        # If SWARM_TOKEN is defined, use token-based auth; otherwise username/password.
        if SWARM_TOKEN:
            self.client = SwarmClient(SWARM_URL, token=SWARM_TOKEN)
        else:
            self.client = SwarmClient(SWARM_URL, SWARM_USER, SWARM_PASS)

    def create_review(self, changelist, description="", reviewers=None):
        """
        Creates a new Swarm review for a shelved changelist.
        Example usage (sync):
            client.reviews.create({
                "change": 12345,
                "description": "My desc",
                "reviewers": ["alice","bob"]
            })
        Returns the new review ID on success.
        """
        print(f"\n» Swarm: Creating review for CL {changelist}...")
        payload = { "change": changelist }
        if description:
            payload["description"] = description
        if reviewers:
            payload["reviewers"] = reviewers

        try:
            resp = self.client.reviews.create(payload)
            review_id = resp["review"]["id"]
            print(f"✔ Review created with ID: {review_id}")
            return review_id
        except Exception as e:
            print("❌ Swarm create_review failed:", e)
            return None

    def attach_change(self, review_id, changelist):
        """
        Attaches another shelved changelist to an existing review.
        Example:
            client.reviews.append_change("reviews/9876", { "change": 12346 })
        """
        print(f"\n» Swarm: Attaching CL {changelist} to review {review_id}...")
        try:
            # The helixswarm client wants the resource path “reviews/<ID>”
            resource = f"reviews/{review_id}"
            payload = { "change": changelist }
            self.client.reviews.append_change(resource, payload)
            print("✔ Attached changelist to review.")
        except Exception as e:
            print("❌ Swarm attach_change failed:", e)

    def update_review(self, review_id, description=None, add_reviewers=None, remove_reviewers=None):
        """
        Updates review metadata. Possible fields:
          • description: new description string (overwrites existing)
          • reviewersAdd: list of usernames to add
          • reviewersRemove: list of usernames to remove

        Example:
            client.reviews.update("reviews/9876", {
                "description": "New desc",
                "reviewersAdd": ["dave"],
                "reviewersRemove": ["carol"]
            })
        """
        print(f"\n» Swarm: Updating review {review_id}...")
        payload = {}
        if description is not None:
            payload["description"] = description
        if add_reviewers:
            payload["reviewersAdd"] = add_reviewers
        if remove_reviewers:
            payload["reviewersRemove"] = remove_reviewers

        try:
            resource = f"reviews/{review_id}"
            self.client.reviews.update(resource, payload)
            print("✔ Review metadata updated.")
        except Exception as e:
            print("❌ Swarm update_review failed:", e)

    def get_review(self, review_id):
        """
        Fetches review details. Prints JSON to screen.
        Example:
            resp = client.reviews.get_info(12345)
        """
        print(f"\n» Swarm: Fetching review {review_id} details...")
        try:
            info = self.client.reviews.get_info(review_id)
            print(json.dumps(info["review"], indent=2))
            return info
        except Exception as e:
            print("❌ Swarm get_review failed:", e)
            return None

    def approve_review(self, review_id, message=""):
        """
        Approves a review. If you want to supply an approval comment, pass it here.
        Example:
            client.reviews.approve("reviews/9876", { "message": "LGTM" })
        """
        print(f"\n» Swarm: Approving review {review_id}...")
        try:
            resource = f"reviews/{review_id}"
            payload = {}
            if message:
                payload["message"] = message
            self.client.reviews.approve(resource, payload)
            print("✔ Review approved.")
        except Exception as e:
            print("❌ Swarm approve_review failed:", e)


# ──────────────────────────────────────────
# INTERACTIVE MENU FUNCTIONS
# ──────────────────────────────────────────

def print_menu():
    print("\n===== Perforce ↔ Swarm Helix Workflow =====")
    print("1)   Perforce: p4 add <file>")
    print("2)   Perforce: p4 edit <file>")
    print("3)   Perforce: p4 delete <file>")
    print("4)   Perforce: p4 diff [optional <file>]")
    print("5)   Perforce: p4 opened (list opened files)")
    print("6)   Perforce: Create a new pending changelist")
    print("7)   Perforce: Shelve a pending changelist")
    print("8)   Perforce: Submit a pending changelist")
    print("9)   Swarm: Create a review for a shelved changelist")
    print("10)  Swarm: Attach another changelist to an existing review")
    print("11)  Swarm: Update review metadata (description, add/remove reviewers)")
    print("12)  Swarm: Fetch and display review details")
    print("13)  Swarm: Approve a review")
    print("14)  Exit")
    print("============================================")


def main():
    # Initialize Perforce client
    p4_client = P4Client()

    # Initialize Swarm helper (sync)
    swarm_helper = SwarmHelper()

    while True:
        print_menu()
        choice = input("Enter choice [1-14]: ").strip()

        if choice == "1":
            file_path = input("Enter file path to add: ").strip()
            if file_path:
                p4_client.add(file_path)
            else:
                print("❌ No file path provided.")

        elif choice == "2":
            file_path = input("Enter file path to edit: ").strip()
            if file_path:
                p4_client.edit(file_path)
            else:
                print("❌ No file path provided.")

        elif choice == "3":
            file_path = input("Enter file path to delete: ").strip()
            if file_path:
                p4_client.delete(file_path)
            else:
                print("❌ No file path provided.")

        elif choice == "4":
            file_path = input("Enter file path to diff (leave blank to diff all): ").strip()
            if file_path:
                p4_client.diff(file_path)
            else:
                p4_client.diff()

        elif choice == "5":
            p4_client.list_opened()

        elif choice == "6":
            desc = input("Enter description for the new changelist (leave blank for default): ").strip()
            if not desc:
                desc = "Auto-generated changelist"
            new_cl = p4_client.create_change(description=desc)
            if new_cl is not None:
                print(f"→ New pending changelist: {new_cl}")

        elif choice == "7":
            cl_input = input("Enter pending changelist number to shelve: ").strip()
            if cl_input.isdigit():
                p4_client.shelve(int(cl_input))
            else:
                print("❌ Invalid changelist number.")

        elif choice == "8":
            cl_input = input("Enter pending changelist number to submit: ").strip()
            if cl_input.isdigit():
                p4_client.submit(int(cl_input))
            else:
                print("❌ Invalid changelist number.")

        elif choice == "9":
            cl_input = input("Enter shelved changelist number to review: ").strip()
            if not cl_input.isdigit():
                print("❌ Invalid changelist number.")
                continue
            changelist = int(cl_input)

            desc = input("Enter review description (optional): ").strip()
            reviewers_str = input(
                "Enter Swarm reviewers (space‑separated usernames, leave blank for none): "
            ).strip()
            reviewers = reviewers_str.split() if reviewers_str else None

            review_id = swarm_helper.create_review(
                changelist=changelist,
                description=desc,
                reviewers=reviewers
            )
            if review_id:
                print(f"→ Created Swarm review ID: {review_id}")

        elif choice == "10":
            rev_input = input("Enter existing Swarm review ID: ").strip()
            cl_input  = input("Enter shelved changelist number to attach: ").strip()
            if not (rev_input.isdigit() and cl_input.isdigit()):
                print("❌ Invalid review ID or changelist number.")
                continue
            review_id  = int(rev_input)
            changelist = int(cl_input)
            swarm_helper.attach_change(review_id, changelist)

        elif choice == "11":
            rev_input = input("Enter Swarm review ID to update: ").strip()
            if not rev_input.isdigit():
                print("❌ Invalid review ID.")
                continue
            review_id = int(rev_input)

            desc = input("Enter new review description (leave blank to skip): ").strip() or None
            add_str = input("Enter reviewers to ADD (space‑separated, leave blank to skip): ").strip()
            remove_str = input("Enter reviewers to REMOVE (space‑separated, leave blank to skip): ").strip()

            add_reviewers    = add_str.split() if add_str else None
            remove_reviewers = remove_str.split() if remove_str else None

            swarm_helper.update_review(
                review_id=review_id,
                description=desc,
                add_reviewers=add_reviewers,
                remove_reviewers=remove_reviewers
            )

        elif choice == "12":
            rev_input = input("Enter Swarm review ID to fetch details: ").strip()
            if not rev_input.isdigit():
                print("❌ Invalid review ID.")
                continue
            review_id = int(rev_input)
            swarm_helper.get_review(review_id)

        elif choice == "13":
            rev_input = input("Enter Swarm review ID to approve: ").strip()
            if not rev_input.isdigit():
                print("❌ Invalid review ID.")
                continue
            review_id = int(rev_input)
            msg = input("Enter approval comment (leave blank for none): ").strip()
            swarm_helper.approve_review(review_id, message=msg)

        elif choice == "14":
            print("\nExiting. Goodbye!")
            break

        else:
            print("❌ Invalid choice. Please enter a number between 1 and 14.")

    # Disconnect Perforce before exiting
    p4_client.disconnect()


if __name__ == "__main__":
    main()