#!/usr/bin/env python3
"""
full_swarm_workflow_interactive.py

An interactive, menu-driven Python CLI that automates the full Perforce → Swarm Helix review workflow
using direct REST calls (no helixswarm library), authenticating via Bearer token.

Requirements:
  • P4Python:      pip install P4Python
  • requests:      pip install requests

Environment variables:
  P4PORT      – Perforce server (e.g. "perforce:1666")
  P4USER      – your Perforce username
  P4CLIENT    – your Perforce workspace/client name
  P4PASSWD    – (optional) your Perforce password (or run `p4 login`)

  SWARM_URL     – e.g. "https://swarm.example.com/api/v10"  (must include `/api/v<ver>`)
  SWARM_TOKEN   – your Swarm API bearer token (required)

  # Optional SSL control:
  REQUESTS_CA_BUNDLE – path to CA bundle PEM file (Requests will pick this up)
  # or to disable verification entirely:
  SWARM_VERIFY=False

Usage:
  python3 full_swarm_workflow_interactive.py
"""
import os
import sys
import json
import requests
from P4 import P4, P4Exception

# ──────────────────────────────────────────
# CONFIGURATION (override via ENV)
# ──────────────────────────────────────────

P4PORT     = os.environ.get("P4PORT",   "perforce:1666")
P4USER     = os.environ.get("P4USER",   "")
P4CLIENT   = os.environ.get("P4CLIENT", "")
P4PASSWD   = os.environ.get("P4PASSWD", "")

SWARM_URL   = os.environ.get("SWARM_URL")
SWARM_TOKEN = os.environ.get("SWARM_TOKEN")
if not SWARM_URL or not SWARM_TOKEN:
    print("❌ ERROR: Please set both SWARM_URL and SWARM_TOKEN in your environment")
    sys.exit(1)

# Determine SSL verification setting
_verify_env = os.environ.get("SWARM_VERIFY", "true").lower()
REQUESTS_VERIFY = False if _verify_env in ("0","false","no") else True
# Requests will also respect REQUESTS_CA_BUNDLE if set

# ──────────────────────────────────────────
# P4CLIENT HELPER
# ──────────────────────────────────────────

class P4Client:
    """Wraps basic Perforce operations via P4Python."""
    def __init__(self):
        self.p4 = P4()
        if P4PORT:   self.p4.port   = P4PORT
        if P4USER:   self.p4.user   = P4USER
        if P4CLIENT: self.p4.client = P4CLIENT
        if P4PASSWD: self.p4.password = P4PASSWD
        try:
            self.p4.connect()
        except P4Exception as e:
            print("❌ Failed to connect to Perforce:", e)
            sys.exit(1)

    def run(self, *args):
        try:
            return self.p4.run(*args)
        except P4Exception as e:
            print(f"❌ P4 Error `{args}`:", e)
            return None

    def add(self, path):
        self._one("add", path, "opened for add")

    def edit(self, path):
        self._one("edit", path, "opened for edit")

    def delete(self, path):
        self._one("delete", path, "opened for delete")

    def _one(self, cmd, path, msg):
        print(f"\n→ p4 {cmd} {path}")
        self.run(cmd, path)
        print(f"✔ File {msg}.")

    def diff(self, path=None):
        cmd = ["diff"] + ([path] if path else [])
        print(f"\n→ p4 {' '.join(cmd)}")
        out = self.run(*cmd) or []
        print("\n".join(out) or "No diffs.")
        print("✔ Diff complete.")

    def list_opened(self):
        print("\n→ p4 opened")
        out = self.run("opened") or []
        print("\n".join(out) or "No open files.")
        print("✔ Listed opened files.")

    def create_change(self, desc="Auto-generated"):
        print("\n→ Creating new changelist…")
        spec = self.run("change", "-o")
        if not spec:
            print("❌ Failed to fetch changelist spec."); return None
        spec = spec[0]
        spec["Description"] = desc
        out = self.run("change", "-i", spec)
        if not out:
            print("❌ Failed to create changelist."); return None
        num = int(out[0].split()[1])
        print(f"✔ New changelist: {num}")
        return num

    def shelve(self, cl):
        print(f"\n→ p4 shelve -c {cl}")
        self.run("shelve", "-c", str(cl))
        print("✔ Shelved.")

    def submit(self, cl):
        print(f"\n→ p4 submit -c {cl}")
        out = self.run("submit", "-c", str(cl)) or []
        print("\n".join(out))
        print("✔ Submitted.")

    def disconnect(self):
        self.p4.disconnect()


# ──────────────────────────────────────────
# REST CLIENT HELPER
# ──────────────────────────────────────────

class SwarmREST:
    """Direct REST wrapper for Helix Swarm review endpoints."""
    def __init__(self, base_url, token):
        self.base = base_url.rstrip('/')
        self.session = requests.Session()
        self.session.headers.update({
            "Authorization": f"Bearer {token}",
            "Content-Type": "application/json"
        })
        self.session.verify = REQUESTS_VERIFY

    def _url(self, path):
        return f"{self.base}/{path.lstrip('/')}"

    def create_review(self, change, description=None, reviewers=None):
        payload = {"change": change}
        if description: payload["description"] = description
        if reviewers:   payload["reviewers"]   = reviewers
        r = self.session.post(self._url("reviews"), json=payload)
        r.raise_for_status()
        rid = r.json()["review"]["id"]
        print(f"✔ Created review ID: {rid}")
        return rid

    def attach_change(self, review_id, change):
        url = self._url(f"reviews/{review_id}/changes")
        payload = {"change": change}
        r = self.session.post(url, json=payload)
        r.raise_for_status()
        print(f"✔ Attached change {change} to review {review_id}")

    def update_review(self, review_id, description=None,
                      add=None, remove=None):
        url = self._url(f"reviews/{review_id}")
        payload = {}
        if description is not None: payload["description"]    = description
        if add:                     payload["reviewersAdd"]   = add
        if remove:                  payload["reviewersRemove"]= remove
        r = self.session.put(url, json=payload)
        r.raise_for_status()
        print(f"✔ Updated review {review_id}")

    def get_review(self, review_id):
        r = self.session.get(self._url(f"reviews/{review_id}"))
        r.raise_for_status()
        info = r.json()["review"]
        print(json.dumps(info, indent=2))
        return info

    def approve_review(self, review_id, message=None):
        url = self._url(f"reviews/{review_id}/approve")
        payload = {"message": message} if message else {}
        r = self.session.post(url, json=payload)
        r.raise_for_status()
        print(f"✔ Approved review {review_id}")


# ──────────────────────────────────────────
# INTERACTIVE MENU
# ──────────────────────────────────────────

def print_menu():
    print("""
===== Perforce ↔ Swarm Helix Menu =====
 1) p4 add <file>
 2) p4 edit <file>
 3) p4 delete <file>
 4) p4 diff [file]
 5) p4 opened
 6) create-change
 7) shelve
 8) submit
 9) create review
10) attach change to review
11) update review metadata
12) get review details
13) approve review
14) exit
======================================
""")

def main():
    p4    = P4Client()
    swarm = SwarmREST(SWARM_URL, SWARM_TOKEN)

    while True:
        print_menu()
        choice = input("Choose [1-14]: ").strip()

        if choice == "1":
            fp = input("File to add: ").strip(); p4.add(fp)
        elif choice == "2":
            fp = input("File to edit: ").strip(); p4.edit(fp)
        elif choice == "3":
            fp = input("File to delete: ").strip(); p4.delete(fp)
        elif choice == "4":
            fp = input("File to diff (blank=all): ").strip() or None
            p4.diff(fp)
        elif choice == "5":
            p4.list_opened()
        elif choice == "6":
            d = input("Changelist description: ").strip() or "Auto-generated"
            cl = p4.create_change(d)
        elif choice == "7":
            cl = int(input("Changelist #: ").strip()); p4.shelve(cl)
        elif choice == "8":
            cl = int(input("Changelist #: ").strip()); p4.submit(cl)
        elif choice == "9":
            cl = int(input("Shelved CL #: ").strip())
            d  = input("Review description (opt): ").strip() or None
            rv = input("Reviewers (space-separated, opt): ").strip().split() or None
            swarm.create_review(cl, description=d, reviewers=rv)
        elif choice == "10":
            rid= int(input("Review ID: ").strip())
            cl = int(input("Shelved CL #: ").strip())
            swarm.attach_change(rid, cl)
        elif choice == "11":
            rid= int(input("Review ID: ").strip())
            d  = input("New description (blank skip): ").strip() or None
            a  = input("Add reviewers (opt): ").strip().split() or None
            r  = input("Remove reviewers (opt): ").strip().split() or None
            swarm.update_review(rid, description=d, add=a, remove=r)
        elif choice == "12":
            rid= int(input("Review ID: ").strip()); swarm.get_review(rid)
        elif choice == "13":
            rid= int(input("Review ID: ").strip())
            m  = input("Approval comment (opt): ").strip() or None
            swarm.approve_review(rid, message=m)
        elif choice == "14":
            print("Goodbye!"); break
        else:
            print("Invalid choice, please pick 1–14.")

    p4.disconnect()

if __name__ == "__main__":
    main()




#!/usr/bin/env python3
"""
swarm_review_curl.py

A Python wrapper for Helix Swarm’s Review API, implemented with curl via subprocess.
Each method corresponds to one of the Swarm “reviews” endpoints and constructs the
appropriate curl command.

Requirements:
  • Python 3.6+
  • curl in your PATH

Environment variables:
  SWARM_URL       – e.g. "https://swarm.example.com/api/v11"
  SWARM_TOKEN     – your Swarm API bearer token
  SWARM_VERIFY    – "false" to skip cert checks, otherwise omitted
  SWARM_CA_BUNDLE – path to a custom CA bundle (optional)
"""

import os
import shlex
import json
import subprocess
from typing import Optional, List, Dict, Any, Union

class SwarmReviewCurl:
    def __init__(self,
                 base_url: str,
                 token: str,
                 verify_ssl: bool = True,
                 ca_bundle: Optional[str] = None):
        """
        :param base_url:   e.g. "https://swarm.example.com/api/v11"
        :param token:      Bearer token
        :param verify_ssl: if False, adds -k to curl
        :param ca_bundle:  if set, adds --cacert <path> to curl
        """
        self.base = base_url.rstrip('/')
        self.token = token
        self.verify_ssl = verify_ssl
        self.ca_bundle = ca_bundle

    def _curl(self,
              method: str,
              path: str,
              data: Optional[Union[Dict, List]] = None,
              params: Optional[Dict[str, Union[str,int]]] = None
             ) -> Any:
        """
        Core curl invoker.
        """
        url = f"{self.base}/{path.lstrip('/')}"
        # append query params
        if params:
            qs = '&'.join(f"{k}={shlex.quote(str(v))}" for k,v in params.items())
            url = f"{url}?{qs}"

        cmd = ["curl", "-s", "-X", method]
        cmd += ["-H", f"Authorization: Bearer {self.token}"]
        cmd += ["-H", "Accept: application/json"]

        if data is not None:
            payload = json.dumps(data)
            cmd += ["-H", "Content-Type: application/json", "--data", payload]

        if not self.verify_ssl:
            cmd.append("-k")
        elif self.ca_bundle:
            cmd += ["--cacert", self.ca_bundle]

        cmd.append(url)

        # Run and capture output
        result = subprocess.run(cmd, capture_output=True, text=True)
        if result.returncode != 0:
            raise RuntimeError(f"curl failed: {result.stderr.strip()}")
        # parse JSON
        try:
            return json.loads(result.stdout)
        except json.JSONDecodeError:
            raise ValueError(f"Invalid JSON response: {result.stdout!r}")

    def list_reviews(self,
                     **kwargs
                    ) -> Dict:
        """
        GET /reviews
        Optional kwargs: max, project, after, afterUpdated, resultOrder, state,
                         keywords, keywordsFields, fields
        """
        return self._curl("GET", "reviews", params=kwargs)["data"]

    def get_review(self,
                   review_id: Union[int,str],
                   fields: Optional[Union[str,List[str]]] = None
                  ) -> Dict:
        """
        GET /reviews/{id}
        """
        params = {}
        if fields:
            params["fields"] = fields if isinstance(fields, str) else ','.join(fields)
        return self._curl("GET", f"reviews/{review_id}", params=params)["review"]

    def create_review(self,
                      change: Union[int,str],
                      description: Optional[str] = None,
                      reviewers: Optional[List[str]] = None,
                      requiredReviewers: Optional[List[str]] = None,
                      reviewerGroups: Optional[List[Dict]] = None
                     ) -> int:
        """
        POST /reviews
        Required: change
        Returns new review ID.
        """
        payload: Dict[str, Any] = {"change": str(change)}
        if description:       payload["description"]       = description
        if reviewers:         payload["reviewers"]         = reviewers
        if requiredReviewers: payload["requiredReviewers"] = requiredReviewers
        if reviewerGroups:    payload["reviewerGroups"]    = reviewerGroups

        resp = self._curl("POST", "reviews", data=payload)
        return resp["review"]["id"]

    def attach_change(self,
                      review_id: Union[int,str],
                      change: Union[int,str]
                     ) -> None:
        """
        POST /reviews/{id}/changes
        """
        payload = {"change": str(change)}
        self._curl("POST", f"reviews/{review_id}/changes", data=payload)

    def update_review(self,
                      review_id: Union[int,str],
                      description: Optional[str] = None,
                      reviewersAdd: Optional[List[str]] = None,
                      reviewersRemove: Optional[List[str]] = None
                     ) -> None:
        """
        PUT /reviews/{id}
        """
        payload: Dict[str, Any] = {}
        if description is not None:     payload["description"]    = description
        if reviewersAdd:                payload["reviewersAdd"]   = reviewersAdd
        if reviewersRemove:             payload["reviewersRemove"]= reviewersRemove
        self._curl("PUT", f"reviews/{review_id}", data=payload)

    def approve_review(self,
                       review_id: Union[int,str],
                       message: Optional[str] = None
                      ) -> None:
        """
        POST /reviews/{id}/approve
        """
        payload = {"message": message} if message else {}
        self._curl("POST", f"reviews/{review_id}/approve", data=payload)

    def reject_review(self,
                      review_id: Union[int,str],
                      message: Optional[str] = None
                     ) -> None:
        """
        POST /reviews/{id}/reject
        """
        payload = {"message": message} if message else {}
        self._curl("POST", f"reviews/{review_id}/reject", data=payload)

    def close_review(self,
                     review_id: Union[int,str]
                    ) -> None:
        """
        POST /reviews/{id}/close
        """
        self._curl("POST", f"reviews/{review_id}/close")

# ──────────────────────────────────────────
# Example usage
# ──────────────────────────────────────────

if __name__ == "__main__":
    api = SwarmReviewCurl(
        base_url=os.environ["SWARM_URL"],
        token=os.environ["SWARM_TOKEN"],
        verify_ssl=os.environ.get("SWARM_VERIFY","true").lower() not in ("0","false"),
        ca_bundle=os.environ.get("SWARM_CA_BUNDLE")
    )

    # 1) List up to 10 reviews
    data = api.list_reviews(max=10)
    print("Recent reviews:", data["reviews"])

    # 2) Create a new review
    new_id = api.create_review(
        change=12345,
        description="This is the review description.",
        reviewers=["raj","mei"],
        requiredReviewers=["vera","dai"],
        reviewerGroups=[
            {"name":"WebDesigners","required":"true","quorum":"1"},
            {"name":"Developers","required":"true"},
            {"name":"Administrators"}
        ]
    )
    print("Created review ID:", new_id)

    # 3) Fetch that review
    review = api.get_review(new_id)
    print(json.dumps(review, indent=2))

    # 4) Approve it
    api.approve_review(new_id, message="LGTM!")

    # 5) Close it
    api.close_review(new_id)


